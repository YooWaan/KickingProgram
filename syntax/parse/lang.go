// Code generated by goyacc -p Exp -o parse/lang.go parse/lang.y. DO NOT EDIT.

//line parse/lang.y:2
package parse

import __yyfmt__ "fmt"

//line parse/lang.y:2

//line parse/lang.y:13
type ExpSymType struct {
	yys   int
	empty struct{}
	ctx   EvalContext
	kv    Expr
	nv    *NamedVar
	s     string
	v     Value
}

const STRING = 57346
const TRUE = 57347
const FALSE = 57348
const INTEGER = 57349
const NIL = 57350

var ExpToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"STRING",
	"TRUE",
	"FALSE",
	"INTEGER",
	"NIL",
	"','",
	"'='",
	"'\\n'",
}

var ExpStatenames = [...]string{}

const ExpEofCode = 1
const ExpErrCode = 2
const ExpInitialStackSize = 16

//line parse/lang.y:88

//line yacctab:1
var ExpExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const ExpPrivate = 57344

const ExpLast = 18

var ExpAct = [...]int{
	5, 8, 14, 15, 16, 13, 7, 8, 9, 3,
	5, 6, 12, 11, 4, 2, 10, 1,
}

var ExpPact = [...]int{
	6, -1000, -10, -1000, -2, -1000, -4, -1000, -1000, -3,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000,
}

var ExpPgo = [...]int{
	0, 17, 15, 9, 14, 12, 11, 6,
}

var ExpR1 = [...]int{
	0, 1, 1, 2, 2, 3, 4, 5, 5, 5,
	5, 6, 6, 7,
}

var ExpR2 = [...]int{
	0, 0, 1, 1, 3, 3, 1, 1, 1, 1,
	1, 1, 2, 1,
}

var ExpChk = [...]int{
	-1000, -1, -2, -3, -4, 4, -6, -7, 11, 10,
	-3, -7, -5, 8, 5, 6, 7,
}

var ExpDef = [...]int{
	1, -2, 2, 3, 0, 6, 0, 11, 13, 0,
	4, 12, 5, 7, 8, 9, 10,
}

var ExpTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	11, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 9, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 10,
}

var ExpTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8,
}

var ExpTok3 = [...]int{
	0,
}

var ExpErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	ExpDebug        = 0
	ExpErrorVerbose = false
)

type ExpLexer interface {
	Lex(lval *ExpSymType) int
	Error(s string)
}

type ExpParser interface {
	Parse(ExpLexer) int
	Lookahead() int
}

type ExpParserImpl struct {
	lval  ExpSymType
	stack [ExpInitialStackSize]ExpSymType
	char  int
}

func (p *ExpParserImpl) Lookahead() int {
	return p.char
}

func ExpNewParser() ExpParser {
	return &ExpParserImpl{}
}

const ExpFlag = -1000

func ExpTokname(c int) string {
	if c >= 1 && c-1 < len(ExpToknames) {
		if ExpToknames[c-1] != "" {
			return ExpToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func ExpStatname(s int) string {
	if s >= 0 && s < len(ExpStatenames) {
		if ExpStatenames[s] != "" {
			return ExpStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func ExpErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !ExpErrorVerbose {
		return "syntax error"
	}

	for _, e := range ExpErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + ExpTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := ExpPact[state]
	for tok := TOKSTART; tok-1 < len(ExpToknames); tok++ {
		if n := base + tok; n >= 0 && n < ExpLast && ExpChk[ExpAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if ExpDef[state] == -2 {
		i := 0
		for ExpExca[i] != -1 || ExpExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; ExpExca[i] >= 0; i += 2 {
			tok := ExpExca[i]
			if tok < TOKSTART || ExpExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if ExpExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += ExpTokname(tok)
	}
	return res
}

func Explex1(lex ExpLexer, lval *ExpSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = ExpTok1[0]
		goto out
	}
	if char < len(ExpTok1) {
		token = ExpTok1[char]
		goto out
	}
	if char >= ExpPrivate {
		if char < ExpPrivate+len(ExpTok2) {
			token = ExpTok2[char-ExpPrivate]
			goto out
		}
	}
	for i := 0; i < len(ExpTok3); i += 2 {
		token = ExpTok3[i+0]
		if token == char {
			token = ExpTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = ExpTok2[1] /* unknown char */
	}
	if ExpDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", ExpTokname(token), uint(char))
	}
	return char, token
}

func ExpParse(Explex ExpLexer) int {
	return ExpNewParser().Parse(Explex)
}

func (Exprcvr *ExpParserImpl) Parse(Explex ExpLexer) int {
	var Expn int
	var ExpVAL ExpSymType
	var ExpDollar []ExpSymType
	_ = ExpDollar // silence set and not used
	ExpS := Exprcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Expstate := 0
	Exprcvr.char = -1
	Exptoken := -1 // Exprcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		Expstate = -1
		Exprcvr.char = -1
		Exptoken = -1
	}()
	Expp := -1
	goto Expstack

ret0:
	return 0

ret1:
	return 1

Expstack:
	/* put a state and value onto the stack */
	if ExpDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", ExpTokname(Exptoken), ExpStatname(Expstate))
	}

	Expp++
	if Expp >= len(ExpS) {
		nyys := make([]ExpSymType, len(ExpS)*2)
		copy(nyys, ExpS)
		ExpS = nyys
	}
	ExpS[Expp] = ExpVAL
	ExpS[Expp].yys = Expstate

Expnewstate:
	Expn = ExpPact[Expstate]
	if Expn <= ExpFlag {
		goto Expdefault /* simple state */
	}
	if Exprcvr.char < 0 {
		Exprcvr.char, Exptoken = Explex1(Explex, &Exprcvr.lval)
	}
	Expn += Exptoken
	if Expn < 0 || Expn >= ExpLast {
		goto Expdefault
	}
	Expn = ExpAct[Expn]
	if ExpChk[Expn] == Exptoken { /* valid shift */
		Exprcvr.char = -1
		Exptoken = -1
		ExpVAL = Exprcvr.lval
		Expstate = Expn
		if Errflag > 0 {
			Errflag--
		}
		goto Expstack
	}

Expdefault:
	/* default state action */
	Expn = ExpDef[Expstate]
	if Expn == -2 {
		if Exprcvr.char < 0 {
			Exprcvr.char, Exptoken = Explex1(Explex, &Exprcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if ExpExca[xi+0] == -1 && ExpExca[xi+1] == Expstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Expn = ExpExca[xi+0]
			if Expn < 0 || Expn == Exptoken {
				break
			}
		}
		Expn = ExpExca[xi+1]
		if Expn < 0 {
			goto ret0
		}
	}
	if Expn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Explex.Error(ExpErrorMessage(Expstate, Exptoken))
			Nerrs++
			if ExpDebug >= 1 {
				__yyfmt__.Printf("%s", ExpStatname(Expstate))
				__yyfmt__.Printf(" saw %s\n", ExpTokname(Exptoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Expp >= 0 {
				Expn = ExpPact[ExpS[Expp].yys] + ExpErrCode
				if Expn >= 0 && Expn < ExpLast {
					Expstate = ExpAct[Expn] /* simulate a shift of "error" */
					if ExpChk[Expstate] == ExpErrCode {
						goto Expstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if ExpDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", ExpS[Expp].yys)
				}
				Expp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if ExpDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", ExpTokname(Exptoken))
			}
			if Exptoken == ExpEofCode {
				goto ret1
			}
			Exprcvr.char = -1
			Exptoken = -1
			goto Expnewstate /* try again in the same state */
		}
	}

	/* reduction by production Expn */
	if ExpDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Expn, ExpStatname(Expstate))
	}

	Expnt := Expn
	Exppt := Expp
	_ = Exppt // guard against "declared and not used"

	Expp -= ExpR2[Expn]
	// Expp is now the index of $0. Perform the default action. Iff the
	// reduced production is Îµ, $1 is possibly out of range.
	if Expp+1 >= len(ExpS) {
		nyys := make([]ExpSymType, len(ExpS)*2)
		copy(nyys, ExpS)
		ExpS = nyys
	}
	ExpVAL = ExpS[Expp+1]

	/* consult goto table to find next state */
	Expn = ExpR1[Expn]
	Expg := ExpPgo[Expn]
	Expj := Expg + ExpS[Expp].yys + 1

	if Expj >= ExpLast {
		Expstate = ExpAct[Expg]
	} else {
		Expstate = ExpAct[Expj]
		if ExpChk[Expstate] != -Expn {
			Expstate = ExpAct[Expg]
		}
	}
	// dummy call; replaced with literal code
	switch Expnt {

	case 1:
		ExpDollar = ExpS[Exppt-0 : Exppt+1]
//line parse/lang.y:31
		{
			Explex.(*Lexer).Expr = nil
		}
	case 2:
		ExpDollar = ExpS[Exppt-1 : Exppt+1]
//line parse/lang.y:35
		{
			Explex.(*Lexer).EvalContext = ExpDollar[1].ctx
		}
	case 3:
		ExpDollar = ExpS[Exppt-1 : Exppt+1]
//line parse/lang.y:42
		{
			ExpVAL.ctx = EvalContext{}
			ExpVAL.ctx.PutNV(ExpDollar[1].nv)
		}
	case 4:
		ExpDollar = ExpS[Exppt-3 : Exppt+1]
//line parse/lang.y:47
		{
			ExpVAL.ctx.PutNV(ExpDollar[3].nv)
		}
	case 5:
		ExpDollar = ExpS[Exppt-3 : Exppt+1]
//line parse/lang.y:53
		{
			ExpVAL.nv = NewNamedVar(ExpDollar[1].s, ExpDollar[3].v)
		}
	case 6:
		ExpDollar = ExpS[Exppt-1 : Exppt+1]
//line parse/lang.y:60
		{
			ExpVAL.s = ExpDollar[1].s
		}
	case 7:
		ExpDollar = ExpS[Exppt-1 : Exppt+1]
//line parse/lang.y:66
		{
			ExpVAL.v = &NilVar{}
		}
	case 8:
		ExpDollar = ExpS[Exppt-1 : Exppt+1]
//line parse/lang.y:70
		{
			ExpVAL.v = &BoolVar{Bool: true}
		}
	case 9:
		ExpDollar = ExpS[Exppt-1 : Exppt+1]
//line parse/lang.y:74
		{
			ExpVAL.v = &BoolVar{Bool: false}
		}
	case 10:
		ExpDollar = ExpS[Exppt-1 : Exppt+1]
//line parse/lang.y:78
		{
			ExpVAL.v = NewInteger(ExpDollar[1].s)
		}
	}
	goto Expstack /* stack new state and value */
}
