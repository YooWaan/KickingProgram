&& if も 非正格

false && { println("!!") ; false }

true && { println("!!") ; false }



無限ストリーム

1. 無限Streamを定義
2. 無限ループするので、与える関数には注意が必要

与える関数には種類があって
- 再起関数
- 余再起関数
がある


再起関数 => データを消費する
余再起 (corecursive)の一部 unfold => データを生成する




まとめ

関数型コードを記述するときに効率性を回復させるための手法として考えることもできますが
それよりもはるかに大きな意図ある
非正格化は、式の記述をその評価の方法やタイミングから切り離すことで、
モジュール性を向上
関心を切り離すことで、同じ記述を複数のコンテキストで再利用することが可能となり、式の異なる部分を評価することで
異なる結果を得られるようになります ＝＞ ポリフォーリズム？

正格コードのように記述と評価が結びついている場合、このようなことは不可能です。


===========
あると良さげ
===========


サンク
------

() => A 型の値は、0個の引数を受け取り、Aを返す関数です。評価されない形式の指揮を一般にサンク(thunk)と呼びます

サンクに対しては、式の評価と結果の取得を強制することができます。


https://en.wikipedia.org/wiki/Thunk


https://en.wikipedia.org/wiki/Modular_programming


引数
------


引数について
https://ja.wikipedia.org/wiki/%E5%BC%95%E6%95%B0


